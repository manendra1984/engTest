{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/data.service.ts","webpack:///./src/app/modal/modal.component.css","webpack:///./src/app/modal/modal.component.html","webpack:///./src/app/modal/modal.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,+DAA+D,+H;;;;;;;;;;;ACA/D,+WAA+W,eAAe,8KAA8K,aAAa,wLAAwL,oBAAoB,kLAAkL,gBAAgB,gKAAgK,2BAA2B,uB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAxkC;AACuC;AACpD;AACC;AACQ;AACG;AAOzD;IAIE,sBAAoB,WAAwB,EAAS,MAAiB;QAAlD,gBAAW,GAAX,WAAW,CAAa;QAAS,WAAM,GAAN,MAAM,CAAW;QAFtE,qBAAgB,GAAa,CAAC,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;IAGtE,CAAC;IAED,+BAAQ,GAAR;QACE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IACtC,CAAC;IACD,iCAAU,GAAV,UAAW,GAAG;QACZ,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qEAAc,EAAE;YACjD,IAAI,EAAE,GAAG;SACV,CAAC,CAAC;QAEH,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,gBAAM;QACxC,CAAC,CAAC,CAAC;IACL,CAAC;IACD,+BAAQ,GAAR;QAAA,iBAmBC;QAjBC,OAAO,qDAAQ,CAAC,KAAK,CAAC;aACnB,IAAI,CACH,gEAAS,CAAC,CAAC,CAAC,EACZ,gEAAS,CAAC,cAAM,YAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,EAA3B,CAA2B,CAAC,CAC7C;aACA,SAAS,CAAC,UAAC,GAAO;YACjB;gBACE,KAAI,CAAC,UAAU,GAAG,IAAI,oEAAkB,EAAE,CAAC;gBAC3C,KAAI,CAAC,UAAU,CAAC,IAAI,GAAG,GAAG,CAAC;aAE5B;QACH,CAAC,EACC,eAAK;YACH,OAAO,CAAC,GAAG,CAAC,+CAA+C,GAAG,KAAK,CAAC,CAAC;QACvE,CAAC,CAAC,CACH;IAEL,CAAC;IAED,kCAAW,GAAX;QACE,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IAClC,CAAC;IACD,kCAAW,GAAX,UAAY,WAAmB;QAC7B,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;IAC5D,CAAC;IA5CU,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAKiC,yDAAW,EAAiB,2DAAS;OAJ3D,YAAY,CA8CxB;IAAD,mBAAC;CAAA;AA9CwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZiC;AACqB;AACtC;AACiG;AAC3F;AACS;AACC;AAuBzD;IAAA;IAAyB,CAAC;IAAb,SAAS;QArBrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,qEAAc;aACf;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,4FAAuB;gBACvB,gEAAc;gBACd,oEAAkB;gBAClB,gEAAc;gBACd,oEAAkB;gBAClB,+DAAa;gBACb,qEAAgB;gBAChB,iEAAe;aAChB;YAED,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;YACzB,eAAe,EAAE,CAAC,qEAAc,CAAC;SAClC,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BqB;AACO;AAEb;AAIrC;IAEE,qBAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAI,CAAC;IAG/C,8BAAQ,GAAR;QACE,IAAM,GAAG,GAAW,yDAAyD,CAAC;QAC9E,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,0DAAG,CAAC,cAAI,IAAI,WAAI,CAAC,MAAM,CAAC,EAAZ,CAAY,CAAC,CAAC,CAAC;IAClE,CAAC;IARU,WAAW;QAHvB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAGgC,+DAAU;OAF/B,WAAW,CASvB;IAAD,kBAAC;CAAA;AATuB;;;;;;;;;;;;ACPxB,+DAA+D,2I;;;;;;;;;;;ACA/D,qDAAqD,aAAa,2H;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAR;AACQ;AAQlE;IAEE,wBACS,SAAuC,EACd,IAAgB;QADzC,cAAS,GAAT,SAAS,CAA8B;QACd,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEvD,iCAAQ,GAAR;IACA,CAAC;IAPU,cAAc;QAL1B,+DAAS,CAAC;YACT,QAAQ,EAAE,WAAW;;;SAGtB,CAAC;QAKG,uEAAM,CAAC,iEAAe,CAAC;yCADN,8DAAY;OAHrB,cAAc,CAS1B;IAAD,qBAAC;CAAA;AAT0B;;;;;;;;;;;;;ACT3B;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<mat-form-field>\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n</mat-form-field>\\n\\n<table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\n\\n  <ng-container matColumnDef=\\\"title\\\">\\n    <th mat-header-cell *matHeaderCellDef> Title. </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.title}} </td>\\n  </ng-container>\\n\\n  \\n  <ng-container matColumnDef=\\\"url\\\">\\n    <th mat-header-cell *matHeaderCellDef> URL </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.url}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"created_at\\\">\\n    <th mat-header-cell *matHeaderCellDef> Created AT </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.created_at}} </td>\\n  </ng-container>\\n\\n\\n  <ng-container matColumnDef=\\\"author\\\">\\n    <th mat-header-cell *matHeaderCellDef> Author </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.author}} </td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row   (click)=\\\"openDialog(row)\\\" *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  \\n</table>\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatTableDataSource, MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { DataService } from './data.service';\nimport { Subscription, interval } from 'rxjs';\nimport { startWith, switchMap } from 'rxjs/operators';\nimport { ModalComponent } from './modal/modal.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  dataSource: any;\n  displayedColumns: string[] = ['title', 'url', 'created_at', 'author'];\n  private subscription: Subscription;\n  constructor(private dataService: DataService, public dialog: MatDialog) {\n  }\n\n  ngOnInit() {\n    this.subscription = this.getPosts();\n  }\n  openDialog(obj): void {\n    const dialogRef = this.dialog.open(ModalComponent, {\n      data: obj\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n    });\n  }\n  getPosts(): Subscription {\n\n    return interval(10000)\n      .pipe(\n        startWith(0),\n        switchMap(() => this.dataService.getPosts())\n      )\n      .subscribe((res: {}) => {\n        {\n          this.dataSource = new MatTableDataSource();\n          this.dataSource.data = res;\n\n        }\n      },\n        error => {\n          console.log('There was an error while retrieving Posts !!!' + error);\n        })\n      ;\n\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\nimport { MatTableModule, MatFormFieldModule, MatInputModule, MatPaginatorModule, MatSortModule, MatDialogModule} from '@angular/material';\nimport { AppComponent } from './app.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModalComponent } from './modal/modal.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ModalComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatTableModule,\n    MatFormFieldModule, \n    MatInputModule, \n    MatPaginatorModule, \n    MatSortModule, \n    HttpClientModule,\n    MatDialogModule\n  ],\n \n  providers: [],\n  bootstrap: [AppComponent],\n  entryComponents: [ModalComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, } from 'rxjs';\nimport { map } from 'rxjs/operators';\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor(private httpClient: HttpClient) { }\n\n\n  getPosts(): Observable<any> {\n    const url: string = \"https://hn.algolia.com/api/v1/search_by_date?tags=story\";\n    return this.httpClient.get(url).pipe(map(data => data['hits']));\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZGFsL21vZGFsLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"\\n<div mat-dialog-content>\\n  <p>{{data | json}}</p>\\n  \\n</div>\\n<div mat-dialog-actions>\\n \\n  <button mat-button [mat-dialog-close] cdkFocusInitial>Ok</button>\\n</div>\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { DialogData } from '../DialogData';\n\n@Component({\n  selector: 'app-modal',\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.css']\n})\nexport class ModalComponent implements OnInit {\n\n  constructor(\n    public dialogRef: MatDialogRef<ModalComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  ngOnInit() {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}